<?xml version="1.0" encoding="utf-8"?>
<Project DefaultTargets="StartBuild"	xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

	<!-- Define and set Properties -->

  <!--import environment specific properties from build-properties proj file -->
  <Import Condition="Exists('$(MSBuildProjectDirectory)\Build-Properties-$(Configuration).proj')" Project="$(MSBuildProjectDirectory)\Build-Properties-$(Configuration).proj"/>
	<PropertyGroup>
    <TargetsToRun Condition="'$(TargetsToRun)' == ''">BuildAndDeploy</TargetsToRun>
    <Major>1</Major>
    <Minor Condition="'$(Minor)' == ''">0</Minor>
    <Build Condition="'$(Build)' == ''">0</Build>
    <!-- replaced by SVN repo number -->
    <Revision Condition="'$(Revision)' == ''">0</Revision>
    <VersionNumber>$(Major).$(Minor).$(Build).$(Revision)</VersionNumber>
    <SourceDirectory Condition="'$(SourceDirectory)' == ''">c:\build\working\source</SourceDirectory>
    <OutputDirectory Condition="'$(OutputDirectory)' == ''">c:\build\drops\output</OutputDirectory>

    <ProgramFilesDirectory Condition="'$(ProgramFilesDirectory)' == ''">C:\Program Files</ProgramFilesDirectory>
    <SlowCheetahTargets>$(SourceDirectory)\BuildAndDeployment\References\SlowCheetah\SlowCheetah.Transforms.targets</SlowCheetahTargets>
    <ProjectTestDir>$(SourceDirectory)\Dashboard.WebApp.Tests</ProjectTestDir>
    <TestProjectFile>$(SourceDirectory)\Dashboard.WebApp.Tests\Dashboard.WebApp.Tests.csproj</TestProjectFile>
    <NUnitResultFile>$(MSBuildProjectDirectory)\nunit-result.xml</NUnitResultFile>
  </PropertyGroup>

	<!-- Third party imports - import msbuild extension pack, and Slow cheetah transforms -->

  <Import Condition="Exists('$(SourceDirectory)\BuildAndDeployment\References\MSBuildExtensionPack\MSBuild.ExtensionPack.tasks')" Project="$(SourceDirectory)\BuildAndDeployment\References\MSBuildExtensionPack\MSBuild.ExtensionPack.tasks"/>
  <Import Condition="Exists('$(SourceDirectory)\BuildAndDeployment\References\MSBuildCommunityTasks\MSBuild.Community.Tasks.Targets')" Project="$(SourceDirectory)\BuildAndDeployment\References\MSBuildCommunityTasks\MSBuild.Community.Tasks.Targets"/>
	<!-- Slow Cheetah for config transforms -->
	<Import Condition="Exists('$(SlowCheetahTargets)')" Project="$(SourceDirectory)\BuildAndDeployment\References\SlowCheetah\SlowCheetah.Transforms.targets"/>

	<!-- Generates the correct version number and other assembly info for our DLLs -->
	<Target Name="GenerateSharedAssemblyInfo">
		<Message Text="Generating SharedAssemblyInfo.cs with Version Number: $(VersionNumber)" />
		<ItemGroup>
			<AssemblyInfoFiles Include="$(SourceDirectory)\BuildAndDeployment\SharedAssemblyInfo.cs"/>
		</ItemGroup>
		<!-- Update an the build and revision numbers -->
		<MSBuild.ExtensionPack.Framework.AssemblyInfo AssemblyVersion="$(VersionNumber)" AssemblyFileVersion="$(VersionNumber)" AssemblyInfoFiles="@(AssemblyInfoFiles)" SkipVersioning="false"/>
		<Message Text="SharedAssemblyInfo.cs created at '$(SourceDirectory)\BuildAndDeployment\'" />
	</Target>

	
	<!-- Target to generate .txt files in the root of our IIS projects so
	we can easily browse and find out what version is being hosted -->
	<Target Name="GenerateVersionTextFiles">
		<Message Text="Generating Version Number text files" />

    <WriteLinesToFile File="$(OutputDirectory)\VersionNum.txt"
											Lines="$(VersionNumber)"
											Overwrite="true" />
    <Message Text="VersionNum.txt created at '$(OutputDirectory)'" />
	</Target>
	
	
	<!-- executes the build -->
	<Target Name="CleanAndRebuild" DependsOnTargets="GenerateSharedAssemblyInfo">

		<!-- lists of transformed config files to move after the build-->
		<ItemGroup>
			<!-- website config files -->
			<ConfigFiles Include="AppSettings.config" />
			<ConfigFiles Include="connectionStrings.config" />
			<ConfigFiles Include="Web.config" />
		</ItemGroup>

		<!-- check drop directory doesn't already exist - remove if does -->
		<RemoveDir Directories="$(OutputDirectory)" ContinueOnError="true" />

		<Message Text="Building configuration $(Configuration) with output path $(OutputDirectory)" Importance="High" />

    <!-- BUILDING - WEBSITE -->
    <Message Text="Web project building..." Importance="normal" />
    <MSBuild Projects="$(SourceDirectory)\Dashboard.WebApp.UI\Dashboard.WebApp.UI.csproj" Targets="Clean;Rebuild;TransformAllFiles;ResolveReferences;_CopyWebApplication" Properties="WebProjectOutputDir=$(OutputDirectory)\;OutDir=$(OutputDirectory)\bin\;SlowCheetahTargets=$(SlowCheetahTargets);Configuration=$(Configuration);DebugSymbols=false;DebugType=None" />
    <!-- move transformed config files from bin to correct location -->
    <Message Text="Web project moving transformed configs..." Importance="normal" />
    <MSBuild.ExtensionPack.FileSystem.RoboCopy Source="$(OutputDirectory)\bin\" Destination="$(OutputDirectory)\" Files="@(ConfigFiles)" Options="/MOV" />
    <Message Text="Web project building complete." Importance="normal" />

	</Target>

	
	<!-- deploys the latest code to the deployment server -->
	<Target Name="DeployToServer" DependsOnTargets="">
		<Message Importance="high" Text="Deploying Web Project to Server: $(DeploymentServerDirectory)" />
		<!-- define which files to deploy for projects -->
		<ItemGroup>
			<WebSiteFiles Include="$(OutputDirectory)\**\*.*" />
		</ItemGroup>

    <Message Text="Web Project files from: $(OutputDirectory)" />
		
		<!-- stop iis app pools -->
		<CallTarget Targets="StopIISAppPools"/>

		<!-- clear out existing folder on deployment server -->
		<Message Text="Removing contents of folder '$(DeploymentServerDirectory)'" />
		<MSBuild.ExtensionPack.FileSystem.Folder TaskAction="RemoveContent" Path="$(DeploymentServerDirectory)"/>
		<!-- copy new files on to deployment server -->
		<Message Text="Copying Website files to deployment server '$(DeploymentServerDirectory)'" />
		<Copy SourceFiles="@(WebSiteFiles)" DestinationFolder="$(DeploymentServerDirectory)\%(RecursiveDir)" />

    <Message Importance="high" Text="Deploying Web Project to Server: $(DeploymentServerDirectory)" />

		<!-- Restart IIS -->
		<CallTarget Targets="StartIISAppPools"/>
		
		<Message Text="Deployment complete" />
	</Target>

  <Target Name="DeployToAzure" DependsOnTargets="">
    <!-- Validate that required Azure FTP parameters are present -->
    <Error Condition="'$(AzureUsername)'==''" Text="AzureUsername property is required"/>
    <Error Condition="'$(AzurePassword)'==''" Text="AzurePassword property is required"/>
    <Error Condition="'$(AzureFtpHost)'==''" Text="AzureFtpHost property is required"/>

    <PropertyGroup>
      <PathToWinSCP>"C:\Program Files (x86)\WinSCP\winscp.exe"</PathToWinSCP>
    </PropertyGroup>

    <Message Importance="high" Text="Deploying Web Project to Server deployment server: '$(AzureFtpHost)'" />
    <Message Importance="high" Text="Backing up website to 'site/backups' folder" />

    <!-- Build batch script to backup current website on Azure and clear out the wwwroot folder -->
    <!-- Script executed via the WinSCP ftp client application in console mode, which should also be deployed on the build server-->
    <Exec Command="echo option batch continue> ftpcmd.dat" />
    <Exec Command="echo option confirm off>> ftpcmd.dat" />
    <Exec Command="echo open ftp://$(AzureUsername):$(AzurePassword)@$(AzureFtpHost)>> ftpcmd.dat"/>
    <Exec Command="echo rmdir site/backups>> ftpcmd.dat"/>
    <Exec Command="echo mkdir site/backups>> ftpcmd.dat"/>
    <Exec Command="echo cd site/wwwroot>> ftpcmd.dat"/>
    <Exec Command="echo mv *.* /site/backups/*.*>> ftpcmd.dat"/>
    <Exec Command="echo exit>> ftpcmd.dat"/>
    <Exec Command="$(PathToWinSCP) /script=ftpcmd.dat"/>
    <Exec Command="del ftpcmd.dat"/>

    <!-- define which files to deploy for projects -->
    <ItemGroup>
      <WebSiteFiles Include="$(OutputDirectory)\**\*.*" Exclude="$(OutputDirectory)\**\*.pdb;$(OutputDirectory)\**\*.scss;$(OutputDirectory)\**\bin\*.xml" />
    </ItemGroup>

    <Message Text="Web Project files from: $(OutputDirectory)" />
    <!-- copy new files on to deployment server -->

    <FtpUpload RemoteUri="ftp://$(AzureFtpHost)"
               Username="$(AzureUsername)"
               UsePassive="true"
               LocalFiles="@(WebSiteFiles)"
               Password="$(AzurePassword)"
               RemoteFiles="@(WebSiteFiles->'/site/wwwroot/%(RecursiveDir)%(Filename)%(Extension)')"/>

    <Message Text="Deployment complete" />
  </Target>

  <!-- stop iis on deployment server so can copy over files-->
  <Target Name="StopIISAppPools">
    <Message Text="Stopping IIS app pools" />
    <MSBuild Projects="IISController.proj" Targets="StopIISAppPool" Properties="DeploymentServerIisAppPoolStopUrl=$(DeploymentServerIisAppPoolStopUrl);AppPoolName=$(WebAppPoolName)" />

    <Message Text="App pools stopped" />
  </Target>

  <!--restart iis on deployment server so site is up and running -->
  <Target Name="StartIISAppPools">
    <Message Text="Starting IIS app pools" />
    <MSBuild Projects="IISController.proj" Targets="StartIISAppPool" Properties="DeploymentServerIisAppPoolStartUrl=$(DeploymentServerIisAppPoolStartUrl);AppPoolName=$(WebAppPoolName)" />

    <Message Text="App pools started" />
  </Target>

  <!-- Run Unit tests -->
  <Target Name="UnitTests">


    <Message Text="******************************************************************************************************"/>
    <Message Text="$(TestProjectFile)"/>
    <Message Text="******************************************************************************************************"/>
    <CreateItem Include="$(TestProjectFile)">
      <Output TaskParameter="Include" ItemName="TestAssembly" />
    </CreateItem>

    <Message Text="******************************************************************************************************"/>
    <Message Text="$(TestAssembly)"/>
    <Message Text="******************************************************************************************************"/>
    
    <MSBuild Projects="$(TestProjectFile)" Targets="Clean;Build" Properties="Configuration=Debug"/>
    <NUnit Assemblies="@(TestAssembly)"
                                   ContinueOnError="true"
                                   ToolPath="$(MSBuildProjectDirectory)\References\NUnit"
                                   OutputXmlFile="$(NUnitResultFile)">
      <!-- Setup test report properties -->
      <Output TaskParameter="Total" PropertyName="ResultTotal"/>
      <Output TaskParameter="NotRun" PropertyName="ResultNotRun"/>
      <Output TaskParameter="Failures" PropertyName="ResultFailures"/>
      <Output TaskParameter="Errors" PropertyName="ResultErrors"/>
      <Output TaskParameter="Inconclusive" PropertyName="ResultInconclusive"/>
      <Output TaskParameter="Ignored" PropertyName="ResultIgnored"/>
      <Output TaskParameter="Skipped" PropertyName="ResultSkipped"/>
      <Output TaskParameter="Invalid" PropertyName="ResultInvalid"/>
      <Output TaskParameter="ExitCode" PropertyName="ExitCode"/>
    </NUnit>
    <!-- Report test statistics -->
    <Message Text="ResultTotal: $(ResultTotal)"/>
    <PropertyGroup>
      <NUnitStatusMessage>Total: $(ResultTotal)</NUnitStatusMessage>
    </PropertyGroup>
    <!-- Output test stats to teamcity dashboard -->
    <Message Text="##teamcity[buildStatus text='{build.status.text}. $(NUnitStatusMessage)']"/>
    <Error Condition="'$(ExitCode)' != '' And '$(ExitCode)' != 0" Text="Tests execution failed" />
  </Target>
  
  
  
  <!-- actually executes everything -->
  <Target Name="BuildOnly" DependsOnTargets="CleanAndRebuild;GenerateVersionTextFiles" />
  <Target Name="BuildAndTest" DependsOnTargets="CleanAndRebuild;GenerateVersionTextFiles;UnitTests" />
  <Target Name="BuildAndDeploy" DependsOnTargets="BuildOnly;DeployToServer" />
  <Target Name="BuildAndDeployToAzure" DependsOnTargets="BuildOnly;DeployToAzure" />
  <Target Name="StartBuild" DependsOnTargets="$(TargetsToRun)" />

</Project>
